// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace config {

namespace {

const ::google::protobuf::Descriptor* Settings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Settings_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Settings_AlgorithmMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Hikcam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Hikcam_reflection_ = NULL;
const ::google::protobuf::Descriptor* Reef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reef_reflection_ = NULL;
const ::google::protobuf::Descriptor* Config_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Config_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_config_2eproto() {
  protobuf_AddDesc_config_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "config.proto");
  GOOGLE_CHECK(file != NULL);
  Settings_descriptor_ = file->message_type(0);
  static const int Settings_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, global_head_detect_thresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, global_upperbody_detect_thresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, reef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, enable_come_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, mask_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, algorithm_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, capture_only_),
  };
  Settings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Settings_descriptor_,
      Settings::default_instance_,
      Settings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Settings));
  Settings_AlgorithmMode_descriptor_ = Settings_descriptor_->enum_type(0);
  Hikcam_descriptor_ = file->message_type(1);
  static const int Hikcam_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hikcam, store_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hikcam, camera_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hikcam, ip_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hikcam, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hikcam, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hikcam, settings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hikcam, desc_),
  };
  Hikcam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Hikcam_descriptor_,
      Hikcam::default_instance_,
      Hikcam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hikcam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hikcam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Hikcam));
  Reef_descriptor_ = file->message_type(2);
  static const int Reef_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reef, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reef, y_),
  };
  Reef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Reef_descriptor_,
      Reef::default_instance_,
      Reef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Reef));
  Config_descriptor_ = file->message_type(3);
  static const int Config_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, camera_),
  };
  Config_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Config_descriptor_,
      Config::default_instance_,
      Config_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Config));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_config_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Settings_descriptor_, &Settings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Hikcam_descriptor_, &Hikcam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Reef_descriptor_, &Reef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Config_descriptor_, &Config::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_config_2eproto() {
  delete Settings::default_instance_;
  delete Settings_reflection_;
  delete Hikcam::default_instance_;
  delete Hikcam_reflection_;
  delete Hikcam::_default_desc_;
  delete Reef::default_instance_;
  delete Reef_reflection_;
  delete Config::default_instance_;
  delete Config_reflection_;
}

void protobuf_AddDesc_config_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014config.proto\022\006config\"\313\002\n\010Settings\022&\n\031g"
    "lobal_head_detect_thresh\030\001 \001(\002:\0030.3\022+\n\036g"
    "lobal_upperbody_detect_thresh\030\002 \001(\002:\0030.3"
    "\022\032\n\004reef\030\003 \002(\0132\014.config.Reef\022\035\n\016enable_c"
    "ome_in\030\004 \001(\010:\005false\022\021\n\tmask_path\030\005 \002(\t\022\?"
    "\n\016algorithm_mode\030\006 \001(\0162\036.config.Settings"
    ".AlgorithmMode:\007DEFAULT\022\033\n\014capture_only\030"
    "\007 \001(\010:\005false\">\n\rAlgorithmMode\022\013\n\007DEFAULT"
    "\020\000\022\014\n\010SNAPSHOT\020\001\022\022\n\016HANDS_LOCATION\020\002\"\270\001\n"
    "\006Hikcam\022\020\n\010store_id\030\001 \002(\005\022\021\n\tcamera_id\030\002"
    " \002(\005\022\022\n\nip_address\030\004 \002(\t\022\014\n\004name\030\005 \002(\t\022\020"
    "\n\010password\030\006 \002(\t\022\"\n\010settings\030\007 \002(\0132\020.con"
    "fig.Settings\0221\n\004desc\030\010 \001(\t:#Brief descri"
    "ption of this HikCamera\"$\n\004Reef\022\r\n\001x\030\001 \002"
    "(\005:\002-1\022\r\n\001y\030\002 \002(\005:\002-1\"(\n\006Config\022\036\n\006camer"
    "a\030\001 \003(\0132\016.config.Hikcam", 623);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "config.proto", &protobuf_RegisterTypes);
  Settings::default_instance_ = new Settings();
  Hikcam::_default_desc_ =
      new ::std::string("Brief description of this HikCamera", 35);
  Hikcam::default_instance_ = new Hikcam();
  Reef::default_instance_ = new Reef();
  Config::default_instance_ = new Config();
  Settings::default_instance_->InitAsDefaultInstance();
  Hikcam::default_instance_->InitAsDefaultInstance();
  Reef::default_instance_->InitAsDefaultInstance();
  Config::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_config_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_config_2eproto {
  StaticDescriptorInitializer_config_2eproto() {
    protobuf_AddDesc_config_2eproto();
  }
} static_descriptor_initializer_config_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Settings_AlgorithmMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Settings_AlgorithmMode_descriptor_;
}
bool Settings_AlgorithmMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Settings_AlgorithmMode Settings::DEFAULT;
const Settings_AlgorithmMode Settings::SNAPSHOT;
const Settings_AlgorithmMode Settings::HANDS_LOCATION;
const Settings_AlgorithmMode Settings::AlgorithmMode_MIN;
const Settings_AlgorithmMode Settings::AlgorithmMode_MAX;
const int Settings::AlgorithmMode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Settings::kGlobalHeadDetectThreshFieldNumber;
const int Settings::kGlobalUpperbodyDetectThreshFieldNumber;
const int Settings::kReefFieldNumber;
const int Settings::kEnableComeInFieldNumber;
const int Settings::kMaskPathFieldNumber;
const int Settings::kAlgorithmModeFieldNumber;
const int Settings::kCaptureOnlyFieldNumber;
#endif  // !_MSC_VER

Settings::Settings()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Settings::InitAsDefaultInstance() {
  reef_ = const_cast< ::config::Reef*>(&::config::Reef::default_instance());
}

Settings::Settings(const Settings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Settings::SharedCtor() {
  _cached_size_ = 0;
  global_head_detect_thresh_ = 0.3f;
  global_upperbody_detect_thresh_ = 0.3f;
  reef_ = NULL;
  enable_come_in_ = false;
  mask_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  algorithm_mode_ = 0;
  capture_only_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Settings::~Settings() {
  SharedDtor();
}

void Settings::SharedDtor() {
  if (mask_path_ != &::google::protobuf::internal::kEmptyString) {
    delete mask_path_;
  }
  if (this != default_instance_) {
    delete reef_;
  }
}

void Settings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Settings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Settings_descriptor_;
}

const Settings& Settings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_2eproto();
  return *default_instance_;
}

Settings* Settings::default_instance_ = NULL;

Settings* Settings::New() const {
  return new Settings;
}

void Settings::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    global_head_detect_thresh_ = 0.3f;
    global_upperbody_detect_thresh_ = 0.3f;
    if (has_reef()) {
      if (reef_ != NULL) reef_->::config::Reef::Clear();
    }
    enable_come_in_ = false;
    if (has_mask_path()) {
      if (mask_path_ != &::google::protobuf::internal::kEmptyString) {
        mask_path_->clear();
      }
    }
    algorithm_mode_ = 0;
    capture_only_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Settings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float global_head_detect_thresh = 1 [default = 0.3];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &global_head_detect_thresh_)));
          set_has_global_head_detect_thresh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_global_upperbody_detect_thresh;
        break;
      }

      // optional float global_upperbody_detect_thresh = 2 [default = 0.3];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_global_upperbody_detect_thresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &global_upperbody_detect_thresh_)));
          set_has_global_upperbody_detect_thresh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reef;
        break;
      }

      // required .config.Reef reef = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reef:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reef()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_enable_come_in;
        break;
      }

      // optional bool enable_come_in = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_come_in:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_come_in_)));
          set_has_enable_come_in();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_mask_path;
        break;
      }

      // required string mask_path = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mask_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mask_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mask_path().data(), this->mask_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_algorithm_mode;
        break;
      }

      // optional .config.Settings.AlgorithmMode algorithm_mode = 6 [default = DEFAULT];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_algorithm_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::config::Settings_AlgorithmMode_IsValid(value)) {
            set_algorithm_mode(static_cast< ::config::Settings_AlgorithmMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_capture_only;
        break;
      }

      // optional bool capture_only = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_capture_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &capture_only_)));
          set_has_capture_only();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Settings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float global_head_detect_thresh = 1 [default = 0.3];
  if (has_global_head_detect_thresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->global_head_detect_thresh(), output);
  }

  // optional float global_upperbody_detect_thresh = 2 [default = 0.3];
  if (has_global_upperbody_detect_thresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->global_upperbody_detect_thresh(), output);
  }

  // required .config.Reef reef = 3;
  if (has_reef()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reef(), output);
  }

  // optional bool enable_come_in = 4 [default = false];
  if (has_enable_come_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->enable_come_in(), output);
  }

  // required string mask_path = 5;
  if (has_mask_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mask_path().data(), this->mask_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->mask_path(), output);
  }

  // optional .config.Settings.AlgorithmMode algorithm_mode = 6 [default = DEFAULT];
  if (has_algorithm_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->algorithm_mode(), output);
  }

  // optional bool capture_only = 7 [default = false];
  if (has_capture_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->capture_only(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Settings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float global_head_detect_thresh = 1 [default = 0.3];
  if (has_global_head_detect_thresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->global_head_detect_thresh(), target);
  }

  // optional float global_upperbody_detect_thresh = 2 [default = 0.3];
  if (has_global_upperbody_detect_thresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->global_upperbody_detect_thresh(), target);
  }

  // required .config.Reef reef = 3;
  if (has_reef()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reef(), target);
  }

  // optional bool enable_come_in = 4 [default = false];
  if (has_enable_come_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->enable_come_in(), target);
  }

  // required string mask_path = 5;
  if (has_mask_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mask_path().data(), this->mask_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->mask_path(), target);
  }

  // optional .config.Settings.AlgorithmMode algorithm_mode = 6 [default = DEFAULT];
  if (has_algorithm_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->algorithm_mode(), target);
  }

  // optional bool capture_only = 7 [default = false];
  if (has_capture_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->capture_only(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Settings::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float global_head_detect_thresh = 1 [default = 0.3];
    if (has_global_head_detect_thresh()) {
      total_size += 1 + 4;
    }

    // optional float global_upperbody_detect_thresh = 2 [default = 0.3];
    if (has_global_upperbody_detect_thresh()) {
      total_size += 1 + 4;
    }

    // required .config.Reef reef = 3;
    if (has_reef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reef());
    }

    // optional bool enable_come_in = 4 [default = false];
    if (has_enable_come_in()) {
      total_size += 1 + 1;
    }

    // required string mask_path = 5;
    if (has_mask_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mask_path());
    }

    // optional .config.Settings.AlgorithmMode algorithm_mode = 6 [default = DEFAULT];
    if (has_algorithm_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->algorithm_mode());
    }

    // optional bool capture_only = 7 [default = false];
    if (has_capture_only()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Settings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Settings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Settings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Settings::MergeFrom(const Settings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_global_head_detect_thresh()) {
      set_global_head_detect_thresh(from.global_head_detect_thresh());
    }
    if (from.has_global_upperbody_detect_thresh()) {
      set_global_upperbody_detect_thresh(from.global_upperbody_detect_thresh());
    }
    if (from.has_reef()) {
      mutable_reef()->::config::Reef::MergeFrom(from.reef());
    }
    if (from.has_enable_come_in()) {
      set_enable_come_in(from.enable_come_in());
    }
    if (from.has_mask_path()) {
      set_mask_path(from.mask_path());
    }
    if (from.has_algorithm_mode()) {
      set_algorithm_mode(from.algorithm_mode());
    }
    if (from.has_capture_only()) {
      set_capture_only(from.capture_only());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Settings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Settings::CopyFrom(const Settings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Settings::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000014) != 0x00000014) return false;

  if (has_reef()) {
    if (!this->reef().IsInitialized()) return false;
  }
  return true;
}

void Settings::Swap(Settings* other) {
  if (other != this) {
    std::swap(global_head_detect_thresh_, other->global_head_detect_thresh_);
    std::swap(global_upperbody_detect_thresh_, other->global_upperbody_detect_thresh_);
    std::swap(reef_, other->reef_);
    std::swap(enable_come_in_, other->enable_come_in_);
    std::swap(mask_path_, other->mask_path_);
    std::swap(algorithm_mode_, other->algorithm_mode_);
    std::swap(capture_only_, other->capture_only_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Settings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Settings_descriptor_;
  metadata.reflection = Settings_reflection_;
  return metadata;
}


// ===================================================================

::std::string* Hikcam::_default_desc_ = NULL;
#ifndef _MSC_VER
const int Hikcam::kStoreIdFieldNumber;
const int Hikcam::kCameraIdFieldNumber;
const int Hikcam::kIpAddressFieldNumber;
const int Hikcam::kNameFieldNumber;
const int Hikcam::kPasswordFieldNumber;
const int Hikcam::kSettingsFieldNumber;
const int Hikcam::kDescFieldNumber;
#endif  // !_MSC_VER

Hikcam::Hikcam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Hikcam::InitAsDefaultInstance() {
  settings_ = const_cast< ::config::Settings*>(&::config::Settings::default_instance());
}

Hikcam::Hikcam(const Hikcam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Hikcam::SharedCtor() {
  _cached_size_ = 0;
  store_id_ = 0;
  camera_id_ = 0;
  ip_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  settings_ = NULL;
  desc_ = const_cast< ::std::string*>(_default_desc_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Hikcam::~Hikcam() {
  SharedDtor();
}

void Hikcam::SharedDtor() {
  if (ip_address_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_address_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (desc_ != _default_desc_) {
    delete desc_;
  }
  if (this != default_instance_) {
    delete settings_;
  }
}

void Hikcam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Hikcam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Hikcam_descriptor_;
}

const Hikcam& Hikcam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_2eproto();
  return *default_instance_;
}

Hikcam* Hikcam::default_instance_ = NULL;

Hikcam* Hikcam::New() const {
  return new Hikcam;
}

void Hikcam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    store_id_ = 0;
    camera_id_ = 0;
    if (has_ip_address()) {
      if (ip_address_ != &::google::protobuf::internal::kEmptyString) {
        ip_address_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_settings()) {
      if (settings_ != NULL) settings_->::config::Settings::Clear();
    }
    if (has_desc()) {
      if (desc_ != _default_desc_) {
        desc_->assign(*_default_desc_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Hikcam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 store_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &store_id_)));
          set_has_store_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_camera_id;
        break;
      }

      // required int32 camera_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camera_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camera_id_)));
          set_has_camera_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ip_address;
        break;
      }

      // required string ip_address = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip_address().data(), this->ip_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // required string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_password;
        break;
      }

      // required string password = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_settings;
        break;
      }

      // required .config.Settings settings = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_settings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_desc;
        break;
      }

      // optional string desc = 8 [default = "Brief description of this HikCamera"];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Hikcam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 store_id = 1;
  if (has_store_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->store_id(), output);
  }

  // required int32 camera_id = 2;
  if (has_camera_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->camera_id(), output);
  }

  // required string ip_address = 4;
  if (has_ip_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip_address().data(), this->ip_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ip_address(), output);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }

  // required string password = 6;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->password(), output);
  }

  // required .config.Settings settings = 7;
  if (has_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->settings(), output);
  }

  // optional string desc = 8 [default = "Brief description of this HikCamera"];
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->desc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Hikcam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 store_id = 1;
  if (has_store_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->store_id(), target);
  }

  // required int32 camera_id = 2;
  if (has_camera_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->camera_id(), target);
  }

  // required string ip_address = 4;
  if (has_ip_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip_address().data(), this->ip_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip_address(), target);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // required string password = 6;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->password(), target);
  }

  // required .config.Settings settings = 7;
  if (has_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->settings(), target);
  }

  // optional string desc = 8 [default = "Brief description of this HikCamera"];
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->desc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Hikcam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 store_id = 1;
    if (has_store_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->store_id());
    }

    // required int32 camera_id = 2;
    if (has_camera_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camera_id());
    }

    // required string ip_address = 4;
    if (has_ip_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip_address());
    }

    // required string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string password = 6;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // required .config.Settings settings = 7;
    if (has_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->settings());
    }

    // optional string desc = 8 [default = "Brief description of this HikCamera"];
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Hikcam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Hikcam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Hikcam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Hikcam::MergeFrom(const Hikcam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_store_id()) {
      set_store_id(from.store_id());
    }
    if (from.has_camera_id()) {
      set_camera_id(from.camera_id());
    }
    if (from.has_ip_address()) {
      set_ip_address(from.ip_address());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_settings()) {
      mutable_settings()->::config::Settings::MergeFrom(from.settings());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Hikcam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hikcam::CopyFrom(const Hikcam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hikcam::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_settings()) {
    if (!this->settings().IsInitialized()) return false;
  }
  return true;
}

void Hikcam::Swap(Hikcam* other) {
  if (other != this) {
    std::swap(store_id_, other->store_id_);
    std::swap(camera_id_, other->camera_id_);
    std::swap(ip_address_, other->ip_address_);
    std::swap(name_, other->name_);
    std::swap(password_, other->password_);
    std::swap(settings_, other->settings_);
    std::swap(desc_, other->desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Hikcam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Hikcam_descriptor_;
  metadata.reflection = Hikcam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Reef::kXFieldNumber;
const int Reef::kYFieldNumber;
#endif  // !_MSC_VER

Reef::Reef()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Reef::InitAsDefaultInstance() {
}

Reef::Reef(const Reef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Reef::SharedCtor() {
  _cached_size_ = 0;
  x_ = -1;
  y_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Reef::~Reef() {
  SharedDtor();
}

void Reef::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Reef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reef_descriptor_;
}

const Reef& Reef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_2eproto();
  return *default_instance_;
}

Reef* Reef::default_instance_ = NULL;

Reef* Reef::New() const {
  return new Reef;
}

void Reef::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = -1;
    y_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Reef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required int32 y = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Reef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 x = 1 [default = -1];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2 [default = -1];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Reef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 x = 1 [default = -1];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2 [default = -1];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Reef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1 [default = -1];
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 2 [default = -1];
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Reef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Reef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Reef::MergeFrom(const Reef& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Reef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reef::CopyFrom(const Reef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reef::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Reef::Swap(Reef* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Reef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reef_descriptor_;
  metadata.reflection = Reef_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Config::kCameraFieldNumber;
#endif  // !_MSC_VER

Config::Config()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Config::InitAsDefaultInstance() {
}

Config::Config(const Config& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Config::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Config::~Config() {
  SharedDtor();
}

void Config::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Config::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_descriptor_;
}

const Config& Config::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_2eproto();
  return *default_instance_;
}

Config* Config::default_instance_ = NULL;

Config* Config::New() const {
  return new Config;
}

void Config::Clear() {
  camera_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .config.Hikcam camera = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_camera:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_camera()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_camera;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .config.Hikcam camera = 1;
  for (int i = 0; i < this->camera_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->camera(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Config::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .config.Hikcam camera = 1;
  for (int i = 0; i < this->camera_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->camera(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Config::ByteSize() const {
  int total_size = 0;

  // repeated .config.Hikcam camera = 1;
  total_size += 1 * this->camera_size();
  for (int i = 0; i < this->camera_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->camera(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Config::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Config* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Config*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Config::MergeFrom(const Config& from) {
  GOOGLE_CHECK_NE(&from, this);
  camera_.MergeFrom(from.camera_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Config::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config::CopyFrom(const Config& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {

  for (int i = 0; i < camera_size(); i++) {
    if (!this->camera(i).IsInitialized()) return false;
  }
  return true;
}

void Config::Swap(Config* other) {
  if (other != this) {
    camera_.Swap(&other->camera_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Config::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Config_descriptor_;
  metadata.reflection = Config_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace config

// @@protoc_insertion_point(global_scope)
